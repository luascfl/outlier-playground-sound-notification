// ==UserScript==
// @name         Outlier Playground Sound Notification
// @namespace    http://tampermonkey.net/
// @version      4.1
// @description  Toca um som quando a gera√ß√£o de resposta termina (o bot√£o 'Stop' √© substitu√≠do pelo 'Send').
// @author       luascfl (revisado por Gemini)
// @match        https://app.outlier.ai/playground*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=outlier.ai
// @license      MIT
// @homepageURL  https://github.com/luascfl/outlier-playground-sound-notification
// @supportURL   https://github.com/luascfl/outlier-playground-sound-notification/issues
// @updateURL    https://raw.githubusercontent.com/luascfl/outlier-playground-sound-notification/main/outlier-playground-sound-notification.user.js
// @downloadURL  https://raw.githubusercontent.com/luascfl/outlier-playground-sound-notification/main/outlier-playground-sound-notification.user.js
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // --- CONFIGURA√á√ÉO ---
    const SOUND_URL = "https://od.lk/s/MjJfMzM5NTM3ODNf/331673__nicola_ariutti__brass_bell_01_take10.wav";
    const POLLING_INTERVAL_MS = 200; // Intervalo de verifica√ß√£o em milissegundos. 200ms √© um bom equil√≠brio.

    // --- INICIALIZA√á√ÉO ---
    const audio = new Audio(SOUND_URL);
    let lastState = null;

    console.log("üöÄ Iniciando Outlier Playground Sound Notification v4.1...");

    /**
     * Tenta tocar o som de notifica√ß√£o.
     * Inclui tratamento de erro para casos em que o navegador bloqueia o autoplay.
     */
    function playSound() {
        console.log("üîî Tocando som de notifica√ß√£o...");
        audio.play().catch(e => console.error("Erro ao tocar o som. O navegador pode ter bloqueado a reprodu√ß√£o autom√°tica. Interaja com a p√°gina (clique em algo) e tente novamente.", e));
    }

    /**
     * Verifica qual tipo de bot√£o est√° vis√≠vel na interface.
     * @returns {'stop' | 'send-enabled' | 'send-disabled' | 'none'} O estado atual do bot√£o.
     */
    function getButtonType() {
        // Procura pelo bot√£o de parar (stop)
        const stopButton = document.querySelector('button:has(svg[data-icon="stop"])');
        if (stopButton) {
            return 'stop';
        }

        // Procura pelo bot√£o de enviar (paper-plane)
        const sendButton = document.querySelector('button:has(svg[data-icon="paper-plane-top"])');
        if (sendButton) {
            // Verifica se o bot√£o de enviar est√° desabilitado
            return sendButton.disabled ? 'send-disabled' : 'send-enabled';
        }

        return 'none';
    }

    /**
     * Fun√ß√£o principal que monitora a mudan√ßa de estado e decide quando tocar o som.
     */
    function monitorStateChange() {
        const currentState = getButtonType();

        // Se o estado n√£o foi inicializado ainda, apenas define o estado inicial.
        if (lastState === null) {
            lastState = currentState;
            return;
        }

        // Se o estado mudou, processa a l√≥gica.
        if (currentState !== lastState) {
            console.log(`Mudan√ßa de estado detectada: de '${lastState}' para '${currentState}'`);

            // A CONDI√á√ÉO CHAVE:
            // Se o estado anterior era 'stop' e o novo estado √© qualquer tipo de 'send',
            // significa que a gera√ß√£o da resposta acabou de terminar.
            if (lastState === 'stop' && currentState.startsWith('send')) {
                console.log("‚úÖ Resposta completa!");
                playSound();
            }

            // Atualiza o √∫ltimo estado conhecido.
            lastState = currentState;
        }
    }

    // Aguarda um momento para garantir que a interface do site foi carregada
    // antes de iniciar o monitoramento.
    setTimeout(() => {
        // Inicializa o estado pela primeira vez.
        lastState = getButtonType();
        console.log(`Estado inicial do bot√£o: '${lastState}'`);

        // Inicia o monitoramento cont√≠nuo (polling).
        setInterval(monitorStateChange, POLLING_INTERVAL_MS);

        console.log("‚úÖ Script iniciado com sucesso! Monitorando o bot√£o de resposta.");
        console.log("‚ÑπÔ∏è O som tocar√° quando a resposta do modelo terminar de ser gerada.");
    }, 1500); // Aumentei um pouco o tempo para garantir que a p√°gina esteja pronta.

    // --- FUN√á√ïES DE DEBUG (Opcional) ---
    function debugElements() {
        console.log("=== INFORMA√á√ïES DE DEBUG ===");
        const sendButton = document.querySelector('button:has(svg[data-icon="paper-plane-top"])');
        const stopButton = document.querySelector('button:has(svg[data-icon="stop"])');
        console.log("Bot√£o de Enviar (Send) encontrado:", sendButton);
        if (sendButton) console.log("HTML do Bot√£o de Enviar:", sendButton.outerHTML);
        console.log("Bot√£o de Parar (Stop) encontrado:", stopButton);
        if (stopButton) console.log("HTML do Bot√£o de Parar:", stopButton.outerHTML);
        console.log("Estado atual (getButtonType):", getButtonType());
        console.log("√öltimo estado registrado (lastState):", lastState);
        console.log("=== FIM DO DEBUG ===");
    }

    // Adiciona o comando de debug √† janela para que possa ser chamado pelo console.
    window.debugOutlierScript = debugElements;
    console.log("üí° Dica: Digite 'debugOutlierScript()' no console para verificar o estado dos elementos.");

})();
